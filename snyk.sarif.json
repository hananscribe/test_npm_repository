{
    "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
    "version": "2.1.0",
    "runs": [
      {
        "tool": {
          "driver": {
            "name": "SnykCode",
            "semanticVersion": "1.0.0",
            "version": "1.0.0",
            "rules": [
              {
                "id": "python/PT/test",
                "name": "PT/test",
                "shortDescription": {
                  "text": "Path Traversal"
                },
                "defaultConfiguration": {
                  "level": "note"
                },
                "help": {
                  "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "python",
                    "PT",
                    "Security",
                    "InTest",
                    "SourceLocalEnv",
                    "SourceCLI",
                    "Taint"
                  ],
                  "categories": [
                    "Security",
                    "InTest"
                  ],
                  "exampleCommitFixes": [
                    {
                      "commitURL": "https://github.com/malept/gmusicprocurator/commit/0df7be3ef3ca89b42331939d88ca9919944295c9?diff=split#diff-9e23a9ffa43e64422973783e9021248781e0732c50d02ec8b7b1ac680b56c173L-1",
                      "lines": [
                        {
                          "line": "from flask import abort, request, Response, send_file, url_for\n",
                          "lineNumber": 18,
                          "lineChange": "removed"
                        },
                        {
                          "line": "from flask import abort, request, Response, safe_join, send_file, url_for\n",
                          "lineNumber": 18,
                          "lineChange": "added"
                        },
                        {
                          "line": "from flask.json import jsonify\n",
                          "lineNumber": 19,
                          "lineChange": "none"
                        },
                        {
                          "line": "import os\n",
                          "lineNumber": 20,
                          "lineChange": "none"
                        },
                        {
                          "line": "import requests\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "from shutil import copyfileobj\n",
                          "lineNumber": 22,
                          "lineChange": "none"
                        },
                        {
                          "line": "from tempfile import NamedTemporaryFile\n",
                          "lineNumber": 23,
                          "lineChange": "none"
                        },
                        {
                          "line": "from xspf import Xspf\n",
                          "lineNumber": 24,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 25,
                          "lineChange": "none"
                        },
                        {
                          "line": "from ..app import app, music\n",
                          "lineNumber": 26,
                          "lineChange": "none"
                        },
                        {
                          "line": "from ..id3 import MP3\n",
                          "lineNumber": 27,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 28,
                          "lineChange": "none"
                        },
                        {
                          "line": "JSON_TYPE = 'application/json'\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "XSPF_TYPE = 'application/xspf+xml'\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": "# Mapping: Google : Mutagen EasyID3\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "METADATA_FIELDS = {\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'artist': 'artist',\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'title': 'title',\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'album': 'album',\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'albumArtist': 'albumartistsort',\n",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'composer': 'composer',\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'trackNumber': 'tracknumber',\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'discNumber': 'discnumber',\n",
                          "lineNumber": 40,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'genre': 'genre',\n",
                          "lineNumber": 41,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'year': 'date',\n",
                          "lineNumber": 42,
                          "lineChange": "none"
                        },
                        {
                          "line": "    'durationMillis': 'length',\n",
                          "lineNumber": 43,
                          "lineChange": "none"
                        },
                        {
                          "line": "}\n",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 45,
                          "lineChange": "none"
                        },
                        {
                          "line": "if app.config['GMP_EMBED_ALBUM_ART']:\n",
                          "lineNumber": 46,
                          "lineChange": "none"
                        },
                        {
                          "line": "    METADATA_FIELDS['albumArtRef'] = 'albumart'\n",
                          "lineNumber": 47,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 48,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 49,
                          "lineChange": "none"
                        },
                        {
                          "line": "def mp3ify(resp):\n",
                          "lineNumber": 50,
                          "lineChange": "none"
                        },
                        {
                          "line": "    '''Sets MIME Type and Content-Disposition header suitable for MP3s.'''\n",
                          "lineNumber": 51,
                          "lineChange": "none"
                        },
                        {
                          "line": "    resp.mimetype = 'audio/mpeg'\n",
                          "lineNumber": 52,
                          "lineChange": "none"
                        },
                        {
                          "line": "    resp.headers.add('Content-Disposition', 'inline', filename='song.mp3')\n",
                          "lineNumber": 53,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return resp\n",
                          "lineNumber": 54,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 55,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "def send_song(filename):\n",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "    '''Generates a Flask response for an MP3 on the filesystem.'''\n",
                          "lineNumber": 58,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return mp3ify(send_file(filename))\n",
                          "lineNumber": 59,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 60,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 61,
                          "lineChange": "none"
                        },
                        {
                          "line": "def gmusic_playlist_to_xspf(playlist_id, playlist):\n",
                          "lineNumber": 62,
                          "lineChange": "none"
                        },
                        {
                          "line": "    '''\n",
                          "lineNumber": 63,
                          "lineChange": "none"
                        },
                        {
                          "line": "    Converts a playlist from gmusicapi into an XSPF playlist.\n",
                          "lineNumber": 64,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :type playlist: dict\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :return: XSPF (XML), UTF-8 encoded\n",
                          "lineNumber": 67,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :rtype: str\n",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "    '''\n",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "    create_ts = int(playlist['creationTimestamp']) / 1000000.0\n",
                          "lineNumber": 70,
                          "lineChange": "none"
                        },
                        {
                          "line": "    create_iso = datetime.utcfromtimestamp(create_ts).isoformat()\n",
                          "lineNumber": 71,
                          "lineChange": "none"
                        },
                        {
                          "line": "    p_url = url_for('get_playlist', _external=True, playlist_id=playlist_id)\n",
                          "lineNumber": 72,
                          "lineChange": "none"
                        },
                        {
                          "line": "    xspf = Xspf(title=playlist['name'], creator=playlist['ownerName'],\n",
                          "lineNumber": 73,
                          "lineChange": "none"
                        },
                        {
                          "line": "                date=create_iso, location=p_url)\n",
                          "lineNumber": 74,
                          "lineChange": "none"
                        },
                        {
                          "line": "    for track in playlist['tracks']:\n",
                          "lineNumber": 75,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if 'track' not in track:\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "            continue\n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "        tmd = track['track']\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "        url = url_for('get_song', _external=True, song_id=tmd['storeId'])\n",
                          "lineNumber": 79,
                          "lineChange": "none"
                        },
                        {
                          "line": "        metadata = {\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'location': url,\n",
                          "lineNumber": 81,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'title': tmd['title'],\n",
                          "lineNumber": 82,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'creator': tmd['artist'],\n",
                          "lineNumber": 83,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'album': tmd['album'],\n",
                          "lineNumber": 84,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'trackNum': str(tmd['trackNumber']),\n",
                          "lineNumber": 85,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'duration': tmd['durationMillis'],\n",
                          "lineNumber": 86,
                          "lineChange": "none"
                        },
                        {
                          "line": "        }\n",
                          "lineNumber": 87,
                          "lineChange": "none"
                        },
                        {
                          "line": "        album_art = tmd.get('albumArtRef', [])\n",
                          "lineNumber": 88,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if album_art:\n",
                          "lineNumber": 89,
                          "lineChange": "none"
                        },
                        {
                          "line": "            metadata['image'] = album_art[0]['url']\n",
                          "lineNumber": 90,
                          "lineChange": "none"
                        },
                        {
                          "line": "        xspf.add_track(metadata)\n",
                          "lineNumber": 91,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return xspf.toXml()\n",
                          "lineNumber": 92,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 93,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 94,
                          "lineChange": "none"
                        },
                        {
                          "line": "@app.route('/songs/<song_id>')\n",
                          "lineNumber": 95,
                          "lineChange": "none"
                        },
                        {
                          "line": "def get_song(song_id):\n",
                          "lineNumber": 96,
                          "lineChange": "none"
                        },
                        {
                          "line": "    '''Retrieves the MP3 for a given ID.'''\n",
                          "lineNumber": 97,
                          "lineChange": "none"
                        },
                        {
                          "line": "    cached_fname = os.path.join(app.config['GMP_CACHE_DIR'], song_id)\n",
                          "lineNumber": 98,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    cached_fname = safe_join(app.config['GMP_CACHE_DIR'], song_id)\n",
                          "lineNumber": 98,
                          "lineChange": "added"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                      "lines": [
                        {
                          "line": "from werkzeug import secure_filename\n",
                          "lineNumber": 20,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "from app import web, CobraTaskInfo, db\n",
                          "lineNumber": 22,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 23,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 24,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/', methods=['GET'])\n",
                          "lineNumber": 25,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/index', methods=['GET'])\n",
                          "lineNumber": 26,
                          "lineChange": "none"
                        },
                        {
                          "line": "def homepage():\n",
                          "lineNumber": 27,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In homepage Route')\n",
                          "lineNumber": 28,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return render_template('index.html')\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/blank')\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "def blank():\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In blank Route')\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return render_template('blank.html')\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/add', methods=['POST'])\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "def add():\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In add Route')\n",
                          "lineNumber": 40,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                          "lineNumber": 41,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # if user upload a file, so we set the scan type to file scan\n",
                          "lineNumber": 42,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                          "lineNumber": 43,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check scan type and level\n",
                          "lineNumber": 45,
                          "lineChange": "none"
                        },
                        {
                          "line": "    scan_type = request.form['scan_type']\n",
                          "lineNumber": 46,
                          "lineChange": "none"
                        },
                        {
                          "line": "    level = request.form['level']\n",
                          "lineNumber": 47,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                          "lineNumber": 48,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                          "lineNumber": 49,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                          "lineNumber": 50,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                          "lineNumber": 51,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 52,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check scan way and version\n",
                          "lineNumber": 53,
                          "lineChange": "none"
                        },
                        {
                          "line": "    scan_way = request.form['scan_way']\n",
                          "lineNumber": 54,
                          "lineChange": "none"
                        },
                        {
                          "line": "    old_version = request.form['old_version']\n",
                          "lineNumber": 55,
                          "lineChange": "none"
                        },
                        {
                          "line": "    new_version = request.form['new_version']\n",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not scan_way or not scan_way.isdigit():\n",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                          "lineNumber": 58,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 59,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if scan_way == '2':\n",
                          "lineNumber": 60,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not old_version or not new_version:\n",
                          "lineNumber": 61,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                          "lineNumber": 62,
                          "lineChange": "none"
                        },
                        {
                          "line": "    elif scan_way == '1':\n",
                          "lineNumber": 63,
                          "lineChange": "none"
                        },
                        {
                          "line": "        old_version = None\n",
                          "lineNumber": 64,
                          "lineChange": "none"
                        },
                        {
                          "line": "        new_version = None\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "    else:\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                          "lineNumber": 67,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "    task_type = 1\n",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check if there is a file or gitlab url\n",
                          "lineNumber": 70,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if len(request.files) == 0:\n",
                          "lineNumber": 71,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # no files, should check username and password\n",
                          "lineNumber": 72,
                          "lineChange": "none"
                        },
                        {
                          "line": "        task_type = 1\n",
                          "lineNumber": 73,
                          "lineChange": "none"
                        },
                        {
                          "line": "        url = request.form['url']\n",
                          "lineNumber": 74,
                          "lineChange": "none"
                        },
                        {
                          "line": "        username = request.form['username']\n",
                          "lineNumber": 75,
                          "lineChange": "none"
                        },
                        {
                          "line": "        password = request.form['password']\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not url or not username or not password:\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                          "lineNumber": 79,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # insert into db\n",
                          "lineNumber": 81,
                          "lineChange": "none"
                        },
                        {
                          "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                          "lineNumber": 82,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                 scan_way, old_version, new_version)\n",
                          "lineNumber": 83,
                          "lineChange": "none"
                        },
                        {
                          "line": "        db.session.add(new_task)\n",
                          "lineNumber": 84,
                          "lineChange": "none"
                        },
                        {
                          "line": "        db.session.commit()\n",
                          "lineNumber": 85,
                          "lineChange": "none"
                        },
                        {
                          "line": "    else:\n",
                          "lineNumber": 86,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # there is a file, check file format and uncompress it.\n",
                          "lineNumber": 87,
                          "lineChange": "none"
                        },
                        {
                          "line": "        task_type = 2\n",
                          "lineNumber": 88,
                          "lineChange": "none"
                        },
                        {
                          "line": "        upload_src = request.files['file']\n",
                          "lineNumber": 89,
                          "lineChange": "none"
                        },
                        {
                          "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                          "lineNumber": 89,
                          "lineChange": "removed"
                        },
                        {
                          "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                          "lineNumber": 90,
                          "lineChange": "added"
                        },
                        {
                          "line": "        filepath = 'uploads/' + filename\n",
                          "lineNumber": 91,
                          "lineChange": "none"
                        },
                        {
                          "line": "        upload_src.save(filepath)\n",
                          "lineNumber": 92,
                          "lineChange": "none"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/WhaleShark-Team/cobra/commit/1ac467a2c1cf8427a5bf60031677817140fe181c?diff=split#diff-1a4392d737f3fd2c0cb7b5c2cb9369b2af835a8f163873ad152e0c2856664af1L-1",
                      "lines": [
                        {
                          "line": "from werkzeug import secure_filename\n",
                          "lineNumber": 20,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "from app import web, CobraTaskInfo, db\n",
                          "lineNumber": 22,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 23,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 24,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/', methods=['GET'])\n",
                          "lineNumber": 25,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/index', methods=['GET'])\n",
                          "lineNumber": 26,
                          "lineChange": "none"
                        },
                        {
                          "line": "def homepage():\n",
                          "lineNumber": 27,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In homepage Route')\n",
                          "lineNumber": 28,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return render_template('index.html')\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/blank')\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "def blank():\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In blank Route')\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return render_template('blank.html')\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "@web.route('/add', methods=['POST'])\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "def add():\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "    log.debug('In add Route')\n",
                          "lineNumber": 40,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # url, username, password, scan_type, level, scan_way, old_version, new_version\n",
                          "lineNumber": 41,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # if user upload a file, so we set the scan type to file scan\n",
                          "lineNumber": 42,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # if there is no upload file, we set the scan type to gitlab scan\n",
                          "lineNumber": 43,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check scan type and level\n",
                          "lineNumber": 45,
                          "lineChange": "none"
                        },
                        {
                          "line": "    scan_type = request.form['scan_type']\n",
                          "lineNumber": 46,
                          "lineChange": "none"
                        },
                        {
                          "line": "    level = request.form['level']\n",
                          "lineNumber": 47,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not scan_type or not level or not scan_type.isdigit() or not level.isdigit():\n",
                          "lineNumber": 48,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'please select Scan vulnerabilities and Level')\n",
                          "lineNumber": 49,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if scan_type not in [str(x) for x in range(1, 4)]:\n",
                          "lineNumber": 50,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'scan type error.')\n",
                          "lineNumber": 51,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 52,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check scan way and version\n",
                          "lineNumber": 53,
                          "lineChange": "none"
                        },
                        {
                          "line": "    scan_way = request.form['scan_way']\n",
                          "lineNumber": 54,
                          "lineChange": "none"
                        },
                        {
                          "line": "    old_version = request.form['old_version']\n",
                          "lineNumber": 55,
                          "lineChange": "none"
                        },
                        {
                          "line": "    new_version = request.form['new_version']\n",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not scan_way or not scan_way.isdigit():\n",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'please select scan method.')\n",
                          "lineNumber": 58,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 59,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if scan_way == '2':\n",
                          "lineNumber": 60,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not old_version or not new_version:\n",
                          "lineNumber": 61,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return jsonify(code=1002, msg=u'in diff mode, please provide new version and old version.')\n",
                          "lineNumber": 62,
                          "lineChange": "none"
                        },
                        {
                          "line": "    elif scan_way == '1':\n",
                          "lineNumber": 63,
                          "lineChange": "none"
                        },
                        {
                          "line": "        old_version = None\n",
                          "lineNumber": 64,
                          "lineChange": "none"
                        },
                        {
                          "line": "        new_version = None\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "    else:\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return jsonify(code=1002, msg=u'scan method error.')\n",
                          "lineNumber": 67,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "    task_type = 1\n",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # check if there is a file or gitlab url\n",
                          "lineNumber": 70,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if len(request.files) == 0:\n",
                          "lineNumber": 71,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # no files, should check username and password\n",
                          "lineNumber": 72,
                          "lineChange": "none"
                        },
                        {
                          "line": "        task_type = 1\n",
                          "lineNumber": 73,
                          "lineChange": "none"
                        },
                        {
                          "line": "        url = request.form['url']\n",
                          "lineNumber": 74,
                          "lineChange": "none"
                        },
                        {
                          "line": "        username = request.form['username']\n",
                          "lineNumber": 75,
                          "lineChange": "none"
                        },
                        {
                          "line": "        password = request.form['password']\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not url or not username or not password:\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return jsonify(code=1002, msg=u'please support username, password and gitlab.')\n",
                          "lineNumber": 79,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # insert into db\n",
                          "lineNumber": 81,
                          "lineChange": "none"
                        },
                        {
                          "line": "        new_task = CobraTaskInfo(task_type, int(time.time()), None, url, username, password, scan_type, level,\n",
                          "lineNumber": 82,
                          "lineChange": "none"
                        },
                        {
                          "line": "                                 scan_way, old_version, new_version)\n",
                          "lineNumber": 83,
                          "lineChange": "none"
                        },
                        {
                          "line": "        db.session.add(new_task)\n",
                          "lineNumber": 84,
                          "lineChange": "none"
                        },
                        {
                          "line": "        db.session.commit()\n",
                          "lineNumber": 85,
                          "lineChange": "none"
                        },
                        {
                          "line": "    else:\n",
                          "lineNumber": 86,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # there is a file, check file format and uncompress it.\n",
                          "lineNumber": 87,
                          "lineChange": "none"
                        },
                        {
                          "line": "        task_type = 2\n",
                          "lineNumber": 88,
                          "lineChange": "none"
                        },
                        {
                          "line": "        upload_src = request.files['file']\n",
                          "lineNumber": 89,
                          "lineChange": "none"
                        },
                        {
                          "line": "        filename = str(int(time.time())) + '_' + upload_src.filename\n",
                          "lineNumber": 89,
                          "lineChange": "removed"
                        },
                        {
                          "line": "        filename = str(int(time.time())) + '_' + secure_filename(upload_src.filename)\n",
                          "lineNumber": 90,
                          "lineChange": "added"
                        },
                        {
                          "line": "        filepath = 'uploads/' + filename\n",
                          "lineNumber": 91,
                          "lineChange": "none"
                        },
                        {
                          "line": "        upload_src.save(filepath)\n",
                          "lineNumber": 92,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 93,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # if you upload a rar file, upload_src.mimetype will returns \"application/octet-stream\"\n",
                          "lineNumber": 94,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # rather than \"application/x-rar\"\n",
                          "lineNumber": 95,
                          "lineChange": "none"
                        },
                        {
                          "line": "        # check file type via mime type\n",
                          "lineNumber": 96,
                          "lineChange": "none"
                        },
                        {
                          "line": "        file_type = magic.from_file(filepath, mime=True)\n",
                          "lineNumber": 97,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if file_type != 'application/x-rar' and file_type != 'application/x-gzip' and file_type != 'application/zip':\n",
                          "lineNumber": 98,
                          "lineChange": "none"
                        },
                        {
                          "line": "            os.remove(filepath)\n",
                          "lineNumber": 99,
                          "lineChange": "none"
                        }
                      ]
                    }
                  ],
                  "exampleCommitDescriptions": [],
                  "precision": "very-high",
                  "repoDatasetSize": 7,
                  "cwe": [
                    "CWE-23"
                  ]
                }
              },
              {
                "id": "python/CommandInjection/test",
                "name": "CommandInjection/test",
                "shortDescription": {
                  "text": "Command Injection"
                },
                "defaultConfiguration": {
                  "level": "note"
                },
                "help": {
                  "markdown": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `& |  ; $ > < \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "python",
                    "CommandInjection",
                    "Security",
                    "InTest",
                    "SourceResourceAccess",
                    "SourceNetworkRequest",
                    "Taint"
                  ],
                  "categories": [
                    "Security",
                    "InTest"
                  ],
                  "exampleCommitFixes": [
                    {
                      "commitURL": "https://github.com/Xcal1bur/Giter/commit/cd3cb5a9a8a2b20d38d76350dce71d5ce4c1ae52?diff=split#diff-5525cbff62ceafe31dc99d746001579986f2348868bf4da54771d6a54259e3f7L-1",
                      "lines": [
                        {
                          "line": "    subprocess.run(f\"git remote add origin git@github.com:{username}/{repo_name}.git\", shell=True)\n",
                          "lineNumber": 99,
                          "lineChange": "removed"
                        },
                        {
                          "line": "subprocess.run(\"git pull origin master:master\", shell=True)\n",
                          "lineNumber": 100,
                          "lineChange": "removed"
                        },
                        {
                          "line": "subprocess.run(\"git rebase origin/master\", shell=True)\n",
                          "lineNumber": 101,
                          "lineChange": "removed"
                        },
                        {
                          "line": "subprocess.run(\"git push -u origin master\", shell=True)\n",
                          "lineNumber": 102,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    subprocess.run([\"git\", \"remote\", \"add\", \"origin\", f\"git@github.com:{username}/{repo_name}.git\"])\n",
                          "lineNumber": 112,
                          "lineChange": "added"
                        },
                        {
                          "line": "subprocess.run([\"git\", \"pull\", \"origin\", \"master:master\"])\n",
                          "lineNumber": 113,
                          "lineChange": "added"
                        },
                        {
                          "line": "subprocess.run([\"git\", \"rebase\", \"origin/master\"])\n",
                          "lineNumber": 114,
                          "lineChange": "added"
                        },
                        {
                          "line": "subprocess.run([\"git\", \"push\", \"-u\", \"origin\", \"master\"])\n",
                          "lineNumber": 115,
                          "lineChange": "added"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/lammps/lammps/commit/22f99be57e6e97754bb9f1ee264b7dd844916fda?diff=split#diff-4e7cc7a44b4b4f346493d07636004e210db6bc3f4ec9e0652aa5c7408360f27aL-1",
                      "lines": [
                        {
                          "line": "import sys,os,re,subprocess\n",
                          "lineNumber": 6,
                          "lineChange": "removed"
                        },
                        {
                          "line": "import sys,os,re,subprocess,shutil\n",
                          "lineNumber": 6,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 7,
                          "lineChange": "none"
                        },
                        {
                          "line": "# help message\n",
                          "lineNumber": 8,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 9,
                          "lineChange": "none"
                        },
                        {
                          "line": "help = \"\"\"\n",
                          "lineNumber": 10,
                          "lineChange": "none"
                        },
                        {
                          "line": "Syntax from src dir: make lib-scafacos args=\"-b\"\n",
                          "lineNumber": 11,
                          "lineChange": "none"
                        },
                        {
                          "line": "                 or: make lib-scafacos args=\"-p /usr/local/scafacos\"\n",
                          "lineNumber": 12,
                          "lineChange": "none"
                        },
                        {
                          "line": "Syntax from lib dir: python Install.py -b\n",
                          "lineNumber": 13,
                          "lineChange": "none"
                        },
                        {
                          "line": "                 or: python Install.py -p /usr/local/scafacos\n",
                          "lineNumber": 14,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 15,
                          "lineChange": "none"
                        },
                        {
                          "line": "specify zero or more options, order does not matter\n",
                          "lineNumber": 16,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 17,
                          "lineChange": "none"
                        },
                        {
                          "line": "  -b = download and build the Scafacos library\n",
                          "lineNumber": 18,
                          "lineChange": "none"
                        },
                        {
                          "line": "  -p = specify folder of existing Scafacos installation\n",
                          "lineNumber": 19,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 20,
                          "lineChange": "none"
                        },
                        {
                          "line": "   always creates includelink, liblink to Scafacos dirs\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 22,
                          "lineChange": "none"
                        },
                        {
                          "line": "Example:\n",
                          "lineNumber": 23,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 24,
                          "lineChange": "none"
                        },
                        {
                          "line": "make lib-scafacos args=\"-b\"   # download/build in lib/scafacos/scafacos\n",
                          "lineNumber": 25,
                          "lineChange": "none"
                        },
                        {
                          "line": "make lib-scafacos args=\"-p $HOME/scafacos\" # use existing Scafacos installation in $HOME\n",
                          "lineNumber": 26,
                          "lineChange": "none"
                        },
                        {
                          "line": "\"\"\"\n",
                          "lineNumber": 27,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 28,
                          "lineChange": "none"
                        },
                        {
                          "line": "# settings\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "version = \"scafacos-1.0.1\"\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": "url = \"https://github.com/scafacos/scafacos/releases/download/v1.0.1/scafacos-1.0.1.tar.gz\"\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "#url = \"https://gigamove.rz.rwth-aachen.de/d/id/CTzyApN76MXMJ6/dd/100\" % version\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "# print error message or help\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "def error(str=None):\n",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "  if not str: print(help)\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "  else: print(\"ERROR\",str)\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "  sys.exit()\n",
                          "lineNumber": 40,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 41,
                          "lineChange": "none"
                        },
                        {
                          "line": "# expand to full path name\n",
                          "lineNumber": 42,
                          "lineChange": "none"
                        },
                        {
                          "line": "# process leading '~' or relative path\n",
                          "lineNumber": 43,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "def fullpath(path):\n",
                          "lineNumber": 45,
                          "lineChange": "none"
                        },
                        {
                          "line": "  return os.path.abspath(os.path.expanduser(path))\n",
                          "lineNumber": 46,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 47,
                          "lineChange": "none"
                        },
                        {
                          "line": "def which(program):\n",
                          "lineNumber": 48,
                          "lineChange": "none"
                        },
                        {
                          "line": "  def is_exe(fpath):\n",
                          "lineNumber": 49,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return os.path.isfile(fpath) and os.access(fpath, os.X_OK)\n",
                          "lineNumber": 50,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 51,
                          "lineChange": "none"
                        },
                        {
                          "line": "  fpath, fname = os.path.split(program)\n",
                          "lineNumber": 52,
                          "lineChange": "none"
                        },
                        {
                          "line": "  if fpath:\n",
                          "lineNumber": 53,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if is_exe(program):\n",
                          "lineNumber": 54,
                          "lineChange": "none"
                        },
                        {
                          "line": "      return program\n",
                          "lineNumber": 55,
                          "lineChange": "none"
                        },
                        {
                          "line": "  else:\n",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "    for path in os.environ[\"PATH\"].split(os.pathsep):\n",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "      path = path.strip('\"')\n",
                          "lineNumber": 58,
                          "lineChange": "none"
                        },
                        {
                          "line": "      exe_file = os.path.join(path, program)\n",
                          "lineNumber": 59,
                          "lineChange": "none"
                        },
                        {
                          "line": "      if is_exe(exe_file):\n",
                          "lineNumber": 60,
                          "lineChange": "none"
                        },
                        {
                          "line": "        return exe_file\n",
                          "lineNumber": 61,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 62,
                          "lineChange": "none"
                        },
                        {
                          "line": "  return None\n",
                          "lineNumber": 63,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 64,
                          "lineChange": "none"
                        },
                        {
                          "line": "def geturl(url,fname):\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "  success = False\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 67,
                          "lineChange": "none"
                        },
                        {
                          "line": "  if which('curl') != None:\n",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "    cmd = 'curl -L -o \"%s\" %s' % (fname,url)\n",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "    try:\n",
                          "lineNumber": 70,
                          "lineChange": "none"
                        },
                        {
                          "line": "      subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                          "lineNumber": 71,
                          "lineChange": "none"
                        },
                        {
                          "line": "      success = True\n",
                          "lineNumber": 72,
                          "lineChange": "none"
                        },
                        {
                          "line": "    except subprocess.CalledProcessError as e:\n",
                          "lineNumber": 73,
                          "lineChange": "none"
                        },
                        {
                          "line": "      print(\"Calling curl failed with: %s\" % e.output.decode('UTF-8'))\n",
                          "lineNumber": 74,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 75,
                          "lineChange": "none"
                        },
                        {
                          "line": "  if not success and which('wget') != None:\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "    cmd = 'wget -O \"%s\" %s' % (fname,url)\n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "    print(\"Wget command: %s\" % cmd)\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "    try:\n",
                          "lineNumber": 79,
                          "lineChange": "none"
                        },
                        {
                          "line": "      subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "      success = True\n",
                          "lineNumber": 81,
                          "lineChange": "none"
                        },
                        {
                          "line": "    except subprocess.CalledProcessError as e:\n",
                          "lineNumber": 82,
                          "lineChange": "none"
                        },
                        {
                          "line": "      print(\"Calling wget failed with: %s\" % e.output.decode('UTF-8'))\n",
                          "lineNumber": 83,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 84,
                          "lineChange": "none"
                        },
                        {
                          "line": "  if not success:\n",
                          "lineNumber": 85,
                          "lineChange": "none"
                        },
                        {
                          "line": "    error(\"Failed to download source code with 'curl' or 'wget'\")\n",
                          "lineNumber": 86,
                          "lineChange": "none"
                        },
                        {
                          "line": "  return\n",
                          "lineNumber": 87,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 88,
                          "lineChange": "none"
                        },
                        {
                          "line": "# parse args\n",
                          "lineNumber": 89,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 90,
                          "lineChange": "none"
                        },
                        {
                          "line": "args = sys.argv[1:]\n",
                          "lineNumber": 91,
                          "lineChange": "none"
                        },
                        {
                          "line": "nargs = len(args)\n",
                          "lineNumber": 92,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 93,
                          "lineChange": "none"
                        },
                        {
                          "line": "homepath = \".\"\n",
                          "lineNumber": 94,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 95,
                          "lineChange": "none"
                        },
                        {
                          "line": "buildflag = True \n",
                          "lineNumber": 96,
                          "lineChange": "none"
                        },
                        {
                          "line": "pathflag = False\n",
                          "lineNumber": 97,
                          "lineChange": "none"
                        },
                        {
                          "line": "linkflag = True\n",
                          "lineNumber": 98,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 99,
                          "lineChange": "none"
                        },
                        {
                          "line": "iarg = 0\n",
                          "lineNumber": 100,
                          "lineChange": "none"
                        },
                        {
                          "line": "while iarg < nargs:\n",
                          "lineNumber": 101,
                          "lineChange": "none"
                        },
                        {
                          "line": "  if args[iarg] == \"-v\":\n",
                          "lineNumber": 102,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if iarg+2 > nargs: error()\n",
                          "lineNumber": 103,
                          "lineChange": "none"
                        },
                        {
                          "line": "    version = args[iarg+1]\n",
                          "lineNumber": 104,
                          "lineChange": "none"
                        },
                        {
                          "line": "    iarg += 2\n",
                          "lineNumber": 105,
                          "lineChange": "none"
                        },
                        {
                          "line": "  elif args[iarg] == \"-p\":\n",
                          "lineNumber": 106,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if iarg+2 > nargs: error()\n",
                          "lineNumber": 107,
                          "lineChange": "none"
                        },
                        {
                          "line": "    scafacospath = fullpath(args[iarg+1])\n",
                          "lineNumber": 108,
                          "lineChange": "none"
                        },
                        {
                          "line": "    pathflag = True\n",
                          "lineNumber": 109,
                          "lineChange": "none"
                        },
                        {
                          "line": "    iarg += 2\n",
                          "lineNumber": 110,
                          "lineChange": "none"
                        },
                        {
                          "line": "  elif args[iarg] == \"-b\":\n",
                          "lineNumber": 111,
                          "lineChange": "none"
                        },
                        {
                          "line": "    buildflag = True\n",
                          "lineNumber": 112,
                          "lineChange": "none"
                        },
                        {
                          "line": "    iarg += 1\n",
                          "lineNumber": 113,
                          "lineChange": "none"
                        },
                        {
                          "line": "  else: error()\n",
                          "lineNumber": 114,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 115,
                          "lineChange": "none"
                        },
                        {
                          "line": "homepath = fullpath(homepath)\n",
                          "lineNumber": 116,
                          "lineChange": "none"
                        },
                        {
                          "line": "homedir = \"%s/%s\" % (homepath,version)\n",
                          "lineNumber": 117,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 118,
                          "lineChange": "none"
                        },
                        {
                          "line": "if (pathflag):\n",
                          "lineNumber": 119,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not os.path.isdir(scafacospath): error(\"Scafacos path does not exist\")\n",
                          "lineNumber": 120,
                          "lineChange": "none"
                        },
                        {
                          "line": "    homedir =scafacospath\n",
                          "lineNumber": 121,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 122,
                          "lineChange": "none"
                        },
                        {
                          "line": "if (buildflag and pathflag):\n",
                          "lineNumber": 123,
                          "lineChange": "none"
                        },
                        {
                          "line": "    error(\"Cannot use -b and -p flag at the same time\")\n",
                          "lineNumber": 124,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 125,
                          "lineChange": "none"
                        },
                        {
                          "line": "# download and unpack Scafacos tarball\n",
                          "lineNumber": 126,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 127,
                          "lineChange": "none"
                        },
                        {
                          "line": "if buildflag:\n",
                          "lineNumber": 128,
                          "lineChange": "none"
                        },
                        {
                          "line": "  print(\"Downloading Scafacos ...\")\n",
                          "lineNumber": 129,
                          "lineChange": "none"
                        },
                        {
                          "line": "  geturl(url,\"%s/%s.tar.gz\" % (homepath,version))\n",
                          "lineNumber": 130,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 131,
                          "lineChange": "none"
                        },
                        {
                          "line": "  print(\"Unpacking Scafacos tarball ...\")\n",
                          "lineNumber": 132,
                          "lineChange": "none"
                        },
                        {
                          "line": "  if os.path.exists(\"%s/%s\" % (homepath,version)):\n",
                          "lineNumber": 133,
                          "lineChange": "none"
                        },
                        {
                          "line": "    cmd = 'rm -rf \"%s/%s\"' % (homepath,version)\n",
                          "lineNumber": 134,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    subprocess.check_output(cmd,stderr=subprocess.STDOUT,shell=True)\n",
                          "lineNumber": 135,
                          "lineChange": "removed"
                        },
                        {
                          "line": "    shutil.rmtree(\"%s/%s\" % (homepath,version))\n",
                          "lineNumber": 134,
                          "lineChange": "added"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/jachinlin/kindle_maker/commit/8804b85a69865837d31e37bdf73e01844229c5bc?diff=split#diff-00e2b2a85960fbf3f1969c885888cbc0aefd4e01c24e7fc34e1fecc94429f7b3L-1",
                      "lines": [
                        {
                          "line": "import shutil\n",
                          "lineNumber": 6,
                          "lineChange": "added"
                        },
                        {
                          "line": "from jinja2 import Environment, FileSystemLoader\n",
                          "lineNumber": 7,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 8,
                          "lineChange": "none"
                        },
                        {
                          "line": "templates_env = Environment(loader=FileSystemLoader('%s/templates/' % os.path.dirname(os.path.realpath(__file__))))\n",
                          "lineNumber": 9,
                          "lineChange": "none"
                        },
                        {
                          "line": "_default_output_dir = '/tmp/kindle_maker/'\n",
                          "lineNumber": 10,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 11,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 12,
                          "lineChange": "none"
                        },
                        {
                          "line": "def render_file(template_name, context, output_name, output_dir):\n",
                          "lineNumber": 13,
                          "lineChange": "none"
                        },
                        {
                          "line": "    template = templates_env.get_template(template_name)\n",
                          "lineNumber": 14,
                          "lineChange": "none"
                        },
                        {
                          "line": "    with open(os.path.join(output_dir, output_name), \"w\") as f:\n",
                          "lineNumber": 15,
                          "lineChange": "none"
                        },
                        {
                          "line": "        f.write(template.render(**context))\n",
                          "lineNumber": 16,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 17,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 18,
                          "lineChange": "none"
                        },
                        {
                          "line": "def render_toc_ncx(headers, output_dir, title=None, author=None):\n",
                          "lineNumber": 19,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 20,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 21,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :param headers:\n",
                          "lineNumber": 22,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :param output_dir:\n",
                          "lineNumber": 23,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :param title:\n",
                          "lineNumber": 24,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :param author:\n",
                          "lineNumber": 25,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :return:\n",
                          "lineNumber": 26,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 27,
                          "lineChange": "none"
                        },
                        {
                          "line": "    render_file(\n",
                          "lineNumber": 28,
                          "lineChange": "none"
                        },
                        {
                          "line": "        'toc.xml',\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "        {\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'headers': headers,\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'title': title or 'jachinlin.github.io' + str(datetime.date.today()),\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "            'author': author or 'jachinlin.github.io'\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "        },\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "        'toc.ncx',\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "        output_dir\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "    )\n",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "def render_toc_html(headers, output_dir):\n",
                          "lineNumber": 40,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 41,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 42,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :param headers:\n",
                          "lineNumber": 43,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :param output_dir:\n",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :return:\n",
                          "lineNumber": 45,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 46,
                          "lineChange": "none"
                        },
                        {
                          "line": "    render_file('toc.html', {'headers': headers}, 'toc.html', output_dir)\n",
                          "lineNumber": 47,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 48,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 49,
                          "lineChange": "none"
                        },
                        {
                          "line": "def render_opf(headers, title, output_dir, author=None):\n",
                          "lineNumber": 50,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 51,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 52,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :param headers:\n",
                          "lineNumber": 53,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :param title:\n",
                          "lineNumber": 54,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :param output_dir:\n",
                          "lineNumber": 55,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :param author:\n",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :return:\n",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 58,
                          "lineChange": "none"
                        },
                        {
                          "line": "    render_file('opf.xml', {'headers': headers, 'title': title,\n",
                          "lineNumber": 59,
                          "lineChange": "none"
                        },
                        {
                          "line": "                            'author': author or 'jachinlin.github.io'}, '{}.opf'.format(title), output_dir)\n",
                          "lineNumber": 60,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 61,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 62,
                          "lineChange": "none"
                        },
                        {
                          "line": "def parse_headers(toc_file_name):\n",
                          "lineNumber": 63,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 64,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :param toc_file_name:\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :return:\n",
                          "lineNumber": 67,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "    headers_info = []\n",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 70,
                          "lineChange": "none"
                        },
                        {
                          "line": "    with open(toc_file_name) as f:\n",
                          "lineNumber": 71,
                          "lineChange": "none"
                        },
                        {
                          "line": "        headers = f.readlines()\n",
                          "lineNumber": 72,
                          "lineChange": "none"
                        },
                        {
                          "line": "        order = 1\n",
                          "lineNumber": 73,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if not headers:\n",
                          "lineNumber": 74,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return None, None\n",
                          "lineNumber": 75,
                          "lineChange": "none"
                        },
                        {
                          "line": "        title_line = 0\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "        while (not headers[title_line].strip()) or title_line == len(headers):\n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "            title_line += 1\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 79,
                          "lineChange": "none"
                        },
                        {
                          "line": "        if title_line == len(headers):\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "            return None, None\n",
                          "lineNumber": 81,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 82,
                          "lineChange": "none"
                        },
                        {
                          "line": "        title = headers[title_line].strip()\n",
                          "lineNumber": 83,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 84,
                          "lineChange": "none"
                        },
                        {
                          "line": "        for h in headers[title_line + 1:]:\n",
                          "lineNumber": 85,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if h.startswith('# '):\n",
                          "lineNumber": 86,
                          "lineChange": "none"
                        },
                        {
                          "line": "                order += 1\n",
                          "lineNumber": 87,
                          "lineChange": "none"
                        },
                        {
                          "line": "                headers_info.append({\n",
                          "lineNumber": 88,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    'title': h[2:].strip(),\n",
                          "lineNumber": 89,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    'play_order': order,\n",
                          "lineNumber": 90,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    'next_headers': []\n",
                          "lineNumber": 91,
                          "lineChange": "none"
                        },
                        {
                          "line": "                })\n",
                          "lineNumber": 92,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 93,
                          "lineChange": "none"
                        },
                        {
                          "line": "            if h.startswith('## '):\n",
                          "lineNumber": 94,
                          "lineChange": "none"
                        },
                        {
                          "line": "                if len(headers) == 0:\n",
                          "lineNumber": 95,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    continue\n",
                          "lineNumber": 96,
                          "lineChange": "none"
                        },
                        {
                          "line": "                order += 1\n",
                          "lineNumber": 97,
                          "lineChange": "none"
                        },
                        {
                          "line": "                headers_info[-1]['next_headers'].append({\n",
                          "lineNumber": 98,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    'title': h[2:].strip(),\n",
                          "lineNumber": 99,
                          "lineChange": "none"
                        },
                        {
                          "line": "                    'play_order': order,\n",
                          "lineNumber": 100,
                          "lineChange": "none"
                        },
                        {
                          "line": "                })\n",
                          "lineNumber": 101,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 102,
                          "lineChange": "none"
                        },
                        {
                          "line": "    return title, headers_info\n",
                          "lineNumber": 103,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 104,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 105,
                          "lineChange": "none"
                        },
                        {
                          "line": "def make_ebook(source_dir, output_dir=None):\n",
                          "lineNumber": 106,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 107,
                          "lineChange": "none"
                        },
                        {
                          "line": "    make ebook with the files in source_dir and put the ebook made in output_dir\n",
                          "lineNumber": 108,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :param source_dir:\n",
                          "lineNumber": 109,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :param output_dir:\n",
                          "lineNumber": 110,
                          "lineChange": "none"
                        },
                        {
                          "line": "    :return:\n",
                          "lineNumber": 111,
                          "lineChange": "none"
                        },
                        {
                          "line": "    \"\"\"\n",
                          "lineNumber": 112,
                          "lineChange": "none"
                        },
                        {
                          "line": "    output_dir = output_dir or _default_output_dir\n",
                          "lineNumber": 113,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 114,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # make a tmp dir in output_dir\n",
                          "lineNumber": 115,
                          "lineChange": "none"
                        },
                        {
                          "line": "    tmp_dir = os.path.join(output_dir, str(uuid.uuid4()))\n",
                          "lineNumber": 116,
                          "lineChange": "none"
                        },
                        {
                          "line": "    os.system(\"mkdir -p {}\".format(tmp_dir))\n",
                          "lineNumber": 116,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 117,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # copy source files to tmp dir\n",
                          "lineNumber": 118,
                          "lineChange": "none"
                        },
                        {
                          "line": "    os.system(\"cp -rf {}/* {}\".format(source_dir, tmp_dir))\n",
                          "lineNumber": 119,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 120,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # parse toc.md file\n",
                          "lineNumber": 121,
                          "lineChange": "none"
                        },
                        {
                          "line": "    toc_file_name = os.path.join(tmp_dir, 'toc.md')\n",
                          "lineNumber": 122,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not os.path.exists(toc_file_name):\n",
                          "lineNumber": 123,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise ValueError('not exists toc md file')\n",
                          "lineNumber": 124,
                          "lineChange": "none"
                        },
                        {
                          "line": "    title, headers = parse_headers(toc_file_name)\n",
                          "lineNumber": 125,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not title:\n",
                          "lineNumber": 126,
                          "lineChange": "none"
                        },
                        {
                          "line": "        raise ValueError('invalid toc md file')\n",
                          "lineNumber": 127,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 128,
                          "lineChange": "none"
                        },
                        {
                          "line": "    # cover\n",
                          "lineNumber": 129,
                          "lineChange": "none"
                        },
                        {
                          "line": "    cover_file_name = os.path.join(tmp_dir, 'cover.jpg')\n",
                          "lineNumber": 130,
                          "lineChange": "none"
                        },
                        {
                          "line": "    if not os.path.exists(cover_file_name):\n",
                          "lineNumber": 131,
                          "lineChange": "none"
                        },
                        {
                          "line": "        cover = '%s/templates/cover.jpg' % os.path.dirname(os.path.realpath(__file__))\n",
                          "lineNumber": 132,
                          "lineChange": "none"
                        },
                        {
                          "line": "        os.system('cp %s %s' % (cover, tmp_dir))\n",
                          "lineNumber": 133,
                          "lineChange": "removed"
                        },
                        {
                          "line": "        shutil.copy(cover, tmp_dir)\n",
                          "lineNumber": 133,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 134,
                          "lineChange": "added"
                        }
                      ]
                    }
                  ],
                  "exampleCommitDescriptions": [],
                  "precision": "very-high",
                  "repoDatasetSize": 47,
                  "cwe": [
                    "CWE-78"
                  ]
                }
              },
              {
                "id": "go/PT/test",
                "name": "PT/test",
                "shortDescription": {
                  "text": "Path Traversal"
                },
                "defaultConfiguration": {
                  "level": "note"
                },
                "help": {
                  "markdown": "## Details\n\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\n\nBeing able to access and manipulate an arbitrary path leads to vulnerabilities when a program is being run with privileges that the user providing the path should not have. A website with a path traversal vulnerability would allow users access to sensitive files on the server hosting it. CLI programs may also be vulnerable to path traversal if they are being ran with elevated privileges (such as with the setuid or setgid flags in Unix systems).\n\nDirectory Traversal vulnerabilities can be generally divided into two types:\n\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\n\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\n\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\n\n```\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\n```\n**Note** `%2e` is the URL encoded version of `.` (dot).\n\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`.\n\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\n\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\n\n```\n2018-04-15 22:04:29 .....           19           19  good.txt\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\n```",
                  "text": ""
                },
                "properties": {
                  "tags": [
                    "go",
                    "PT",
                    "Security",
                    "InTest",
                    "SourceLocalEnv",
                    "SourceCLI",
                    "Taint"
                  ],
                  "categories": [
                    "Security",
                    "InTest"
                  ],
                  "exampleCommitFixes": [
                    {
                      "commitURL": "https://github.com/sigstore/cosign/commit/a7806bf769c9ce69bcaee3e2fa1427a350fa954d?diff=split#diff-afc19adc437d3a6ba861083d4de4e705cb865c953e8f4c8c13c3bcaea1aec469L-1",
                      "lines": [
                        {
                          "line": "\t\"path/filepath\"\n",
                          "lineNumber": 25,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 26,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\"github.com/google/go-containerregistry/pkg/authn\"\n",
                          "lineNumber": 27,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\"github.com/google/go-containerregistry/pkg/name\"\n",
                          "lineNumber": 28,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\"github.com/google/go-containerregistry/pkg/v1/remote\"\n",
                          "lineNumber": 29,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\"github.com/peterbourgon/ff/v3/ffcli\"\n",
                          "lineNumber": 30,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\"github.com/sigstore/cosign/pkg/cosign\"\n",
                          "lineNumber": 31,
                          "lineChange": "none"
                        },
                        {
                          "line": ")\n",
                          "lineNumber": 32,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 33,
                          "lineChange": "none"
                        },
                        {
                          "line": "func Upload() *ffcli.Command {\n",
                          "lineNumber": 34,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tvar (\n",
                          "lineNumber": 35,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tflagset   = flag.NewFlagSet(\"cosign upload\", flag.ExitOnError)\n",
                          "lineNumber": 36,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tsignature = flagset.String(\"signature\", \"\", \"the signature, path to the signature, or {-} for stdin\")\n",
                          "lineNumber": 37,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tpayload   = flagset.String(\"payload\", \"\", \"path to the payload covered by the signature (if using another format)\")\n",
                          "lineNumber": 38,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t)\n",
                          "lineNumber": 39,
                          "lineChange": "none"
                        },
                        {
                          "line": "\treturn &ffcli.Command{\n",
                          "lineNumber": 40,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tName:       \"upload\",\n",
                          "lineNumber": 41,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tShortUsage: \"cosign upload <image uri>\",\n",
                          "lineNumber": 42,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tShortHelp:  \"upload signatures to the supplied container image\",\n",
                          "lineNumber": 43,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tFlagSet:    flagset,\n",
                          "lineNumber": 44,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tExec: func(ctx context.Context, args []string) error {\n",
                          "lineNumber": 45,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\t\tif len(args) != 1 {\n",
                          "lineNumber": 46,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\t\t\treturn flag.ErrHelp\n",
                          "lineNumber": 47,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\t\t}\n",
                          "lineNumber": 48,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 49,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\t\treturn UploadCmd(ctx, *signature, *payload, args[0])\n",
                          "lineNumber": 50,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\t},\n",
                          "lineNumber": 51,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t}\n",
                          "lineNumber": 52,
                          "lineChange": "none"
                        },
                        {
                          "line": "}\n",
                          "lineNumber": 53,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 54,
                          "lineChange": "none"
                        },
                        {
                          "line": "func UploadCmd(ctx context.Context, sigRef, payloadRef, imageRef string) error {\n",
                          "lineNumber": 55,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tvar b64SigBytes []byte\n",
                          "lineNumber": 56,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 57,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tb64SigBytes, err := signatureBytes(sigRef)\n",
                          "lineNumber": 58,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tif err != nil {\n",
                          "lineNumber": 59,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\treturn err\n",
                          "lineNumber": 60,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t} else if len(b64SigBytes) == 0 {\n",
                          "lineNumber": 61,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\treturn errors.New(\"empty signature\")\n",
                          "lineNumber": 62,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t}\n",
                          "lineNumber": 63,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 64,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tref, err := name.ParseReference(imageRef)\n",
                          "lineNumber": 65,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tif err != nil {\n",
                          "lineNumber": 66,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\treturn err\n",
                          "lineNumber": 67,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t}\n",
                          "lineNumber": 68,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 69,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tget, err := remote.Get(ref, remote.WithAuthFromKeychain(authn.DefaultKeychain))\n",
                          "lineNumber": 70,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tif err != nil {\n",
                          "lineNumber": 71,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\treturn err\n",
                          "lineNumber": 72,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t}\n",
                          "lineNumber": 73,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 74,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tdstTag := ref.Context().Tag(cosign.Munge(get.Descriptor))\n",
                          "lineNumber": 75,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 76,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tvar payload []byte\n",
                          "lineNumber": 77,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tif payloadRef == \"\" {\n",
                          "lineNumber": 78,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tpayload, err = cosign.Payload(get.Descriptor, nil)\n",
                          "lineNumber": 79,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t} else {\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tpayload, err = ioutil.ReadFile(payloadRef)\n",
                          "lineNumber": 80,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t}\n",
                          "lineNumber": 82,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tif err != nil {\n",
                          "lineNumber": 83,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\treturn err\n",
                          "lineNumber": 84,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t}\n",
                          "lineNumber": 85,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 86,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t// This expects it to not be base64 encoded, so decode first\n",
                          "lineNumber": 87,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tsigBytes, err := base64.StdEncoding.DecodeString(string(b64SigBytes))\n",
                          "lineNumber": 88,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tif err != nil {\n",
                          "lineNumber": 89,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\treturn err\n",
                          "lineNumber": 90,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t}\n",
                          "lineNumber": 91,
                          "lineChange": "none"
                        },
                        {
                          "line": "\treturn cosign.Upload(sigBytes, payload, dstTag)\n",
                          "lineNumber": 92,
                          "lineChange": "none"
                        },
                        {
                          "line": "}\n",
                          "lineNumber": 93,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 94,
                          "lineChange": "none"
                        },
                        {
                          "line": "type SignatureArgType uint8\n",
                          "lineNumber": 95,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 96,
                          "lineChange": "none"
                        },
                        {
                          "line": "const (\n",
                          "lineNumber": 97,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tStdinSignature SignatureArgType = iota\n",
                          "lineNumber": 98,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tRawSignature   SignatureArgType = iota\n",
                          "lineNumber": 99,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tFileSignature  SignatureArgType = iota\n",
                          "lineNumber": 100,
                          "lineChange": "none"
                        },
                        {
                          "line": ")\n",
                          "lineNumber": 101,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 102,
                          "lineChange": "none"
                        },
                        {
                          "line": "func signatureBytes(sigRef string) ([]byte, error) {\n",
                          "lineNumber": 103,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t// sigRef can be \"-\", a string or a file.\n",
                          "lineNumber": 104,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tswitch signatureType(sigRef) {\n",
                          "lineNumber": 105,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tcase StdinSignature:\n",
                          "lineNumber": 106,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\treturn ioutil.ReadAll(os.Stdin)\n",
                          "lineNumber": 107,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tcase RawSignature:\n",
                          "lineNumber": 108,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\treturn []byte(sigRef), nil\n",
                          "lineNumber": 109,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tcase FileSignature:\n",
                          "lineNumber": 110,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\treturn ioutil.ReadFile(sigRef)\n",
                          "lineNumber": 110,
                          "lineChange": "removed"
                        },
                        {
                          "line": "\t\treturn ioutil.ReadFile(filepath.Clean(sigRef))\n",
                          "lineNumber": 111,
                          "lineChange": "added"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/kvdi/kvdi/commit/1297e7e5fcae097229e05cf31d95f06a736414bf?diff=split#diff-37d9857eda65693ff81ac1d04e138819aa6f7eff8f098ba05d736374b22e29ebL-1",
                      "lines": [
                        {
                          "line": "\tdstFile := filepath.Join(uploadDir, handler.Filename)\n",
                          "lineNumber": 326,
                          "lineChange": "removed"
                        },
                        {
                          "line": "\tdstFile := filepath.Join(uploadDir, filepath.Clean(handler.Filename))\n",
                          "lineNumber": 326,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 327,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tf, err := os.OpenFile(dstFile, os.O_WRONLY|os.O_CREATE, 0666)\n",
                          "lineNumber": 328,
                          "lineChange": "none"
                        }
                      ]
                    },
                    {
                      "commitURL": "https://github.com/bazelbuild/bazel-gazelle/commit/ff4d67f395b3f4d1dc9810eeceb61585fea252cb?diff=split#diff-32b3dd34b70937b5c3d53114046fa35fc0f5afd2cd13f8fa40c7e17a506b5c24L-1",
                      "lines": [
                        {
                          "line": "\tuc.c.RepoRoot, err = filepath.EvalSymlinks(uc.c.RepoRoot)\n",
                          "lineNumber": 240,
                          "lineChange": "added"
                        },
                        {
                          "line": "\tif err != nil {\n",
                          "lineNumber": 241,
                          "lineChange": "added"
                        },
                        {
                          "line": "\t\treturn nil, fmt.Errorf(\"failed to evaluate symlinks for repo root: %v\", err)\n",
                          "lineNumber": 242,
                          "lineChange": "added"
                        },
                        {
                          "line": "\t}\n",
                          "lineNumber": 243,
                          "lineChange": "added"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 244,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tfor _, dir := range uc.c.Dirs {\n",
                          "lineNumber": 245,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tif !isDescendingDir(dir, uc.c.RepoRoot) {\n",
                          "lineNumber": 246,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\t\treturn nil, fmt.Errorf(\"dir %q is not a subdirectory of repo root %q\", dir, uc.c.RepoRoot)\n",
                          "lineNumber": 247,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\t}\n",
                          "lineNumber": 248,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t}\n",
                          "lineNumber": 249,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 250,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tuc.c.ValidBuildFileNames = strings.Split(*buildFileName, \",\")\n",
                          "lineNumber": 251,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tif len(uc.c.ValidBuildFileNames) == 0 {\n",
                          "lineNumber": 252,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\treturn nil, fmt.Errorf(\"no valid build file names specified\")\n",
                          "lineNumber": 253,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t}\n",
                          "lineNumber": 254,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 255,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tuc.c.SetBuildTags(*buildTags)\n",
                          "lineNumber": 256,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tuc.c.PreprocessTags()\n",
                          "lineNumber": 257,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 258,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tif goPrefix.set {\n",
                          "lineNumber": 259,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tuc.c.GoPrefix = goPrefix.value\n",
                          "lineNumber": 260,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t} else {\n",
                          "lineNumber": 261,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tuc.c.GoPrefix, err = loadGoPrefix(uc.c)\n",
                          "lineNumber": 262,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tif err != nil {\n",
                          "lineNumber": 263,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\t\treturn nil, err\n",
                          "lineNumber": 264,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\t}\n",
                          "lineNumber": 265,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t}\n",
                          "lineNumber": 266,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tif err := config.CheckPrefix(uc.c.GoPrefix); err != nil {\n",
                          "lineNumber": 267,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\treturn nil, err\n",
                          "lineNumber": 268,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t}\n",
                          "lineNumber": 269,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 270,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tuc.c.ShouldFix = cmd == fixCmd\n",
                          "lineNumber": 271,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 272,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tuc.c.DepMode, err = config.DependencyModeFromString(*external)\n",
                          "lineNumber": 273,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tif err != nil {\n",
                          "lineNumber": 274,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\treturn nil, err\n",
                          "lineNumber": 275,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t}\n",
                          "lineNumber": 276,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 277,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tif proto.set {\n",
                          "lineNumber": 278,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tuc.c.ProtoMode, err = config.ProtoModeFromString(proto.value)\n",
                          "lineNumber": 279,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tif err != nil {\n",
                          "lineNumber": 280,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\t\treturn nil, err\n",
                          "lineNumber": 281,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\t}\n",
                          "lineNumber": 282,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\tuc.c.ProtoModeExplicit = true\n",
                          "lineNumber": 283,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t}\n",
                          "lineNumber": 284,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 285,
                          "lineChange": "none"
                        },
                        {
                          "line": "\temit, ok := modeFromName[*mode]\n",
                          "lineNumber": 286,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tif !ok {\n",
                          "lineNumber": 287,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t\treturn nil, fmt.Errorf(\"unrecognized emit mode: %q\", *mode)\n",
                          "lineNumber": 288,
                          "lineChange": "none"
                        },
                        {
                          "line": "\t}\n",
                          "lineNumber": 289,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tuc.emit = emit\n",
                          "lineNumber": 290,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 291,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tuc.outDir = *outDir\n",
                          "lineNumber": 292,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tuc.outSuffix = *outSuffix\n",
                          "lineNumber": 293,
                          "lineChange": "none"
                        },
                        {
                          "line": "\n",
                          "lineNumber": 294,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tworkspacePath := filepath.Join(uc.c.RepoRoot, \"WORKSPACE\")\n",
                          "lineNumber": 295,
                          "lineChange": "none"
                        },
                        {
                          "line": "\tworkspaceContent, err := ioutil.ReadFile(workspacePath)\n",
                          "lineNumber": 296,
                          "lineChange": "none"
                        }
                      ]
                    }
                  ],
                  "exampleCommitDescriptions": [],
                  "precision": "very-high",
                  "repoDatasetSize": 12,
                  "cwe": [
                    "CWE-23"
                  ]
                }
              }
            ]
          }
        },
        "results": [
          {
            "ruleId": "python/PT/test",
            "ruleIndex": 0,
            "level": "note",
            "message": {
              "text": "Unsanitized input from a command line argument flows into open, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
              "arguments": [
                "[a command line argument](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13)",
                "[open](14)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "examples/tests/crawl_and_generate_SBOM.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 99,
                    "endLine": 99,
                    "startColumn": 30,
                    "endColumn": 34
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "913e8bdefa955e950a63836626c3b9fdd0cf3696e951167679c7f6f595c58c65",
              "1": "9eac1254.ecc4e7fd.187bf175.8ea012cf.f3eda546.addfbd48.75d4ed92.fb7ef6ed.cd5b7e60.277c621c.dd205910.9cd2dfe0.4608c58f.addfbd48.f6dc7859.6aac30d8"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 32,
                              "endLine": 32,
                              "startColumn": 12,
                              "endColumn": 29
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 32,
                              "endLine": 32,
                              "startColumn": 12,
                              "endColumn": 29
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 32,
                              "endLine": 32,
                              "startColumn": 5,
                              "endColumn": 31
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 34,
                              "endLine": 34,
                              "startColumn": 19,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 34,
                              "endLine": 34,
                              "startColumn": 19,
                              "endColumn": 30
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 34,
                              "endLine": 34,
                              "startColumn": 5,
                              "endColumn": 30
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 36,
                              "endLine": 36,
                              "startColumn": 40,
                              "endColumn": 51
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 37,
                              "endLine": 37,
                              "startColumn": 12,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 80,
                              "endLine": 80,
                              "startColumn": 5,
                              "endColumn": 40
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 93,
                              "endLine": 93,
                              "startColumn": 33,
                              "endColumn": 48
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 10,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 98,
                              "endLine": 98,
                              "startColumn": 50,
                              "endColumn": 65
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 11,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 98,
                              "endLine": 98,
                              "startColumn": 47,
                              "endColumn": 102
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 12,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 98,
                              "endLine": 98,
                              "startColumn": 25,
                              "endColumn": 102
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 13,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 99,
                              "endLine": 99,
                              "startColumn": 35,
                              "endColumn": 54
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 14,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 99,
                              "endLine": 99,
                              "startColumn": 30,
                              "endColumn": 34
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 413,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/CommandInjection/test",
            "ruleIndex": 1,
            "level": "note",
            "message": {
              "text": "Unsanitized input from data from a remote resource flows into subprocess.check_output, where it is used as a shell command. This may result in a Command Injection vulnerability.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
              "arguments": [
                "[data from a remote resource](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39)",
                "[subprocess.check_output](40)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "examples/tests/crawl_and_generate_SBOM.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 96,
                    "endLine": 96,
                    "startColumn": 38,
                    "endColumn": 61
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "bbbca52f3701d032ab37f071c53ceb2bd48be4b52041b33b2b05ea2ef85704db",
              "1": "085ed9a7.6d7b0371.9e305599.46c97f1b.52f23fed.ba14daf2.081ac3f4.b60afa86.99ada332.35bcc9c7.c04ec478.f6463326.e57c3047.b29c1a40.cc914b1e.6aac30d8"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 43,
                              "endLine": 43,
                              "startColumn": 19,
                              "endColumn": 32
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 43,
                              "endLine": 43,
                              "startColumn": 19,
                              "endColumn": 32
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 43,
                              "endLine": 43,
                              "startColumn": 9,
                              "endColumn": 32
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 45,
                              "endLine": 45,
                              "startColumn": 72,
                              "endColumn": 79
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 45,
                              "endLine": 45,
                              "startColumn": 16,
                              "endColumn": 26
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 45,
                              "endLine": 45,
                              "startColumn": 9,
                              "endColumn": 80
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 46,
                              "endLine": 46,
                              "startColumn": 25,
                              "endColumn": 29
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 46,
                              "endLine": 46,
                              "startColumn": 21,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 46,
                              "endLine": 46,
                              "startColumn": 16,
                              "endColumn": 20
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 46,
                              "endLine": 46,
                              "startColumn": 9,
                              "endColumn": 31
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 10,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 47,
                              "endLine": 47,
                              "startColumn": 12,
                              "endColumn": 16
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 11,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 83,
                              "endLine": 83,
                              "startColumn": 9,
                              "endColumn": 44
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 12,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 84,
                              "endLine": 84,
                              "startColumn": 19,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 13,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 85,
                              "endLine": 85,
                              "startColumn": 20,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 14,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 85,
                              "endLine": 85,
                              "startColumn": 13,
                              "endColumn": 16
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 15,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 87,
                              "endLine": 87,
                              "startColumn": 51,
                              "endColumn": 54
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 16,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 88,
                              "endLine": 88,
                              "startColumn": 50,
                              "endColumn": 53
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 17,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 49,
                              "endLine": 49,
                              "startColumn": 24,
                              "endColumn": 27
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 18,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 50,
                              "endLine": 50,
                              "startColumn": 27,
                              "endColumn": 30
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 19,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 50,
                              "endLine": 50,
                              "startColumn": 18,
                              "endColumn": 26
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 20,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 50,
                              "endLine": 50,
                              "startColumn": 5,
                              "endColumn": 31
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 21,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 18,
                              "endColumn": 28
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 22,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 18,
                              "endColumn": 33
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 23,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 18,
                              "endColumn": 39
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 24,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 18,
                              "endColumn": 50
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 25,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 5,
                              "endColumn": 55
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 26,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 53,
                              "endLine": 53,
                              "startColumn": 12,
                              "endColumn": 22
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 27,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 54,
                              "endLine": 54,
                              "startColumn": 23,
                              "endColumn": 33
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 28,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 54,
                              "endLine": 54,
                              "startColumn": 23,
                              "endColumn": 37
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 29,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 54,
                              "endLine": 54,
                              "startColumn": 9,
                              "endColumn": 14
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 30,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 55,
                              "endLine": 55,
                              "startColumn": 16,
                              "endColumn": 21
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 31,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 88,
                              "endLine": 88,
                              "startColumn": 17,
                              "endColumn": 22
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 32,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 91,
                              "endLine": 91,
                              "startColumn": 78,
                              "endColumn": 83
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 33,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 91,
                              "endLine": 91,
                              "startColumn": 64,
                              "endColumn": 92
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 34,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 91,
                              "endLine": 91,
                              "startColumn": 39,
                              "endColumn": 51
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 35,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 91,
                              "endLine": 91,
                              "startColumn": 21,
                              "endColumn": 93
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 36,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 92,
                              "endLine": 92,
                              "startColumn": 33,
                              "endColumn": 48
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 37,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 94,
                              "endLine": 94,
                              "startColumn": 42,
                              "endColumn": 57
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 38,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 96,
                              "endLine": 96,
                              "startColumn": 83,
                              "endColumn": 98
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 39,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 96,
                              "endLine": 96,
                              "startColumn": 62,
                              "endColumn": 118
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 40,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 96,
                              "endLine": 96,
                              "startColumn": 38,
                              "endColumn": 61
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 438,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/CommandInjection/test",
            "ruleIndex": 1,
            "level": "note",
            "message": {
              "text": "Unsanitized input from data from a remote resource flows into os.system, where it is used as a shell command. This may result in a Command Injection vulnerability.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
              "arguments": [
                "[data from a remote resource](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39),(40)",
                "[os.system](41)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "examples/tests/crawl_and_generate_SBOM.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 103,
                    "endLine": 103,
                    "startColumn": 25,
                    "endColumn": 34
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "297c208636fe5c2808cebd6de0ca4be5659ba22b7de7153519f96b2d8d3f81d7",
              "1": "085ed9a7.c539ec23.d8adf923.139c59a8.39ad5f85.ba14daf2.081ac3f4.e480cb2b.99ada332.35bcc9c7.c04ec478.f6463326.e57c3047.b29c1a40.5deb2603.6aac30d8"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 43,
                              "endLine": 43,
                              "startColumn": 19,
                              "endColumn": 32
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 43,
                              "endLine": 43,
                              "startColumn": 19,
                              "endColumn": 32
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 43,
                              "endLine": 43,
                              "startColumn": 9,
                              "endColumn": 32
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 45,
                              "endLine": 45,
                              "startColumn": 72,
                              "endColumn": 79
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 45,
                              "endLine": 45,
                              "startColumn": 16,
                              "endColumn": 26
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 45,
                              "endLine": 45,
                              "startColumn": 9,
                              "endColumn": 80
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 46,
                              "endLine": 46,
                              "startColumn": 25,
                              "endColumn": 29
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 46,
                              "endLine": 46,
                              "startColumn": 21,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 46,
                              "endLine": 46,
                              "startColumn": 16,
                              "endColumn": 20
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 46,
                              "endLine": 46,
                              "startColumn": 9,
                              "endColumn": 31
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 10,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 47,
                              "endLine": 47,
                              "startColumn": 12,
                              "endColumn": 16
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 11,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 83,
                              "endLine": 83,
                              "startColumn": 9,
                              "endColumn": 44
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 12,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 84,
                              "endLine": 84,
                              "startColumn": 19,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 13,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 85,
                              "endLine": 85,
                              "startColumn": 20,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 14,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 85,
                              "endLine": 85,
                              "startColumn": 13,
                              "endColumn": 16
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 15,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 87,
                              "endLine": 87,
                              "startColumn": 51,
                              "endColumn": 54
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 16,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 88,
                              "endLine": 88,
                              "startColumn": 50,
                              "endColumn": 53
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 17,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 49,
                              "endLine": 49,
                              "startColumn": 24,
                              "endColumn": 27
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 18,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 50,
                              "endLine": 50,
                              "startColumn": 27,
                              "endColumn": 30
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 19,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 50,
                              "endLine": 50,
                              "startColumn": 18,
                              "endColumn": 26
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 20,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 50,
                              "endLine": 50,
                              "startColumn": 5,
                              "endColumn": 31
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 21,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 18,
                              "endColumn": 28
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 22,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 18,
                              "endColumn": 33
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 23,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 18,
                              "endColumn": 39
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 24,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 18,
                              "endColumn": 50
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 25,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 5,
                              "endColumn": 55
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 26,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 53,
                              "endLine": 53,
                              "startColumn": 12,
                              "endColumn": 22
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 27,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 54,
                              "endLine": 54,
                              "startColumn": 23,
                              "endColumn": 33
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 28,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 54,
                              "endLine": 54,
                              "startColumn": 23,
                              "endColumn": 37
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 29,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 54,
                              "endLine": 54,
                              "startColumn": 9,
                              "endColumn": 14
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 30,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 55,
                              "endLine": 55,
                              "startColumn": 16,
                              "endColumn": 21
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 31,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 88,
                              "endLine": 88,
                              "startColumn": 17,
                              "endColumn": 22
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 32,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 91,
                              "endLine": 91,
                              "startColumn": 78,
                              "endColumn": 83
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 33,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 91,
                              "endLine": 91,
                              "startColumn": 64,
                              "endColumn": 92
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 34,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 91,
                              "endLine": 91,
                              "startColumn": 39,
                              "endColumn": 51
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 35,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 91,
                              "endLine": 91,
                              "startColumn": 21,
                              "endColumn": 93
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 36,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 92,
                              "endLine": 92,
                              "startColumn": 33,
                              "endColumn": 48
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 37,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 94,
                              "endLine": 94,
                              "startColumn": 42,
                              "endColumn": 57
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 38,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 96,
                              "endLine": 96,
                              "startColumn": 83,
                              "endColumn": 98
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 39,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 103,
                              "endLine": 103,
                              "startColumn": 56,
                              "endColumn": 71
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 40,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 103,
                              "endLine": 103,
                              "startColumn": 35,
                              "endColumn": 105
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 41,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 103,
                              "endLine": 103,
                              "startColumn": 25,
                              "endColumn": 34
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 438,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "python/CommandInjection/test",
            "ruleIndex": 1,
            "level": "note",
            "message": {
              "text": "Unsanitized input from data from a remote resource flows into os.system, where it is used as a shell command. This may result in a Command Injection vulnerability.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a shell command. This may result in a Command Injection vulnerability.",
              "arguments": [
                "[data from a remote resource](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12),(13),(14),(15),(16),(17),(18),(19),(20),(21),(22),(23),(24),(25),(26),(27),(28),(29),(30),(31),(32),(33),(34),(35),(36),(37),(38),(39),(40),(41)",
                "[os.system](42)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "examples/tests/crawl_and_generate_SBOM.py",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 105,
                    "endLine": 105,
                    "startColumn": 25,
                    "endColumn": 34
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "a582a66ea5ab61edde1e0c51e38a9b267550c9a34f686181fac21efacb1d327a",
              "1": "bff5e86f.c539ec23.ac2fe198.17639f70.0272f83e.52c32567.e9a6114e.b60afa86.99ada332.35bcc9c7.c04ec478.f6463326.e57c3047.b29c1a40.cc914b1e.6aac30d8"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 43,
                              "endLine": 43,
                              "startColumn": 19,
                              "endColumn": 32
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 43,
                              "endLine": 43,
                              "startColumn": 19,
                              "endColumn": 32
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 43,
                              "endLine": 43,
                              "startColumn": 9,
                              "endColumn": 32
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 45,
                              "endLine": 45,
                              "startColumn": 72,
                              "endColumn": 79
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 45,
                              "endLine": 45,
                              "startColumn": 16,
                              "endColumn": 26
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 45,
                              "endLine": 45,
                              "startColumn": 9,
                              "endColumn": 80
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 46,
                              "endLine": 46,
                              "startColumn": 25,
                              "endColumn": 29
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 46,
                              "endLine": 46,
                              "startColumn": 21,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 46,
                              "endLine": 46,
                              "startColumn": 16,
                              "endColumn": 20
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 46,
                              "endLine": 46,
                              "startColumn": 9,
                              "endColumn": 31
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 10,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 47,
                              "endLine": 47,
                              "startColumn": 12,
                              "endColumn": 16
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 11,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 83,
                              "endLine": 83,
                              "startColumn": 9,
                              "endColumn": 44
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 12,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 84,
                              "endLine": 84,
                              "startColumn": 19,
                              "endColumn": 23
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 13,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 85,
                              "endLine": 85,
                              "startColumn": 20,
                              "endColumn": 24
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 14,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 85,
                              "endLine": 85,
                              "startColumn": 13,
                              "endColumn": 16
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 15,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 87,
                              "endLine": 87,
                              "startColumn": 51,
                              "endColumn": 54
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 16,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 88,
                              "endLine": 88,
                              "startColumn": 50,
                              "endColumn": 53
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 17,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 49,
                              "endLine": 49,
                              "startColumn": 24,
                              "endColumn": 27
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 18,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 50,
                              "endLine": 50,
                              "startColumn": 27,
                              "endColumn": 30
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 19,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 50,
                              "endLine": 50,
                              "startColumn": 18,
                              "endColumn": 26
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 20,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 50,
                              "endLine": 50,
                              "startColumn": 5,
                              "endColumn": 31
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 21,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 18,
                              "endColumn": 28
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 22,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 18,
                              "endColumn": 33
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 23,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 18,
                              "endColumn": 39
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 24,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 18,
                              "endColumn": 50
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 25,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 51,
                              "endLine": 51,
                              "startColumn": 5,
                              "endColumn": 55
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 26,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 53,
                              "endLine": 53,
                              "startColumn": 12,
                              "endColumn": 22
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 27,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 54,
                              "endLine": 54,
                              "startColumn": 23,
                              "endColumn": 33
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 28,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 54,
                              "endLine": 54,
                              "startColumn": 23,
                              "endColumn": 37
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 29,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 54,
                              "endLine": 54,
                              "startColumn": 9,
                              "endColumn": 14
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 30,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 55,
                              "endLine": 55,
                              "startColumn": 16,
                              "endColumn": 21
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 31,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 88,
                              "endLine": 88,
                              "startColumn": 17,
                              "endColumn": 22
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 32,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 91,
                              "endLine": 91,
                              "startColumn": 78,
                              "endColumn": 83
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 33,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 91,
                              "endLine": 91,
                              "startColumn": 64,
                              "endColumn": 92
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 34,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 91,
                              "endLine": 91,
                              "startColumn": 39,
                              "endColumn": 51
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 35,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 91,
                              "endLine": 91,
                              "startColumn": 21,
                              "endColumn": 93
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 36,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 92,
                              "endLine": 92,
                              "startColumn": 33,
                              "endColumn": 48
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 37,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 94,
                              "endLine": 94,
                              "startColumn": 42,
                              "endColumn": 57
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 38,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 96,
                              "endLine": 96,
                              "startColumn": 83,
                              "endColumn": 98
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 39,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 103,
                              "endLine": 103,
                              "startColumn": 56,
                              "endColumn": 71
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 40,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 105,
                              "endLine": 105,
                              "startColumn": 56,
                              "endColumn": 71
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 41,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 105,
                              "endLine": 105,
                              "startColumn": 35,
                              "endColumn": 95
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 42,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "examples/tests/crawl_and_generate_SBOM.py",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 105,
                              "endLine": 105,
                              "startColumn": 25,
                              "endColumn": 34
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 438,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "go/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from a CLI argument flows into os.ReadDir, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to get a list of arbitrary files.",
              "arguments": [
                "[a CLI argument](0)",
                "[flows](1),(2),(3),(4),(5),(6)",
                "[os.ReadDir](7)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/conformance/generator/main.go",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 34,
                    "endLine": 34,
                    "startColumn": 17,
                    "endColumn": 27
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "d325f4e62ab02d66421aa7714e00a900034754fa13df158aa8c4c16b9c9ee31b",
              "1": "ba4e4356.8877507c.1e05be5f.657bd6af.db2bb079.995dab92.df7e59ba.e01cd24f.842d3790.348ddf12.1e05be5f.9692a5c1.e8c00e77.67ab4541.0873598c.fbc19cb8"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 30,
                              "endLine": 30,
                              "startColumn": 17,
                              "endColumn": 27
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 30,
                              "endLine": 30,
                              "startColumn": 17,
                              "endColumn": 27
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 30,
                              "endLine": 30,
                              "startColumn": 2,
                              "endColumn": 13
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 33,
                              "endLine": 33,
                              "startColumn": 28,
                              "endColumn": 39
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 33,
                              "endLine": 33,
                              "startColumn": 14,
                              "endColumn": 27
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 33,
                              "endLine": 33,
                              "startColumn": 3,
                              "endColumn": 10
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 34,
                              "endLine": 34,
                              "startColumn": 28,
                              "endColumn": 35
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 34,
                              "endLine": 34,
                              "startColumn": 17,
                              "endColumn": 27
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 450,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "go/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from a CLI argument flows into os.WriteFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to write arbitrary files.",
              "arguments": [
                "[a CLI argument](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9),(10),(11),(12)",
                "[os.WriteFile](13)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/conformance/generator/main.go",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 57,
                    "endLine": 57,
                    "startColumn": 14,
                    "endColumn": 26
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "8b3725218bfd5c65504b06ba9c17107d860793ffc0ccf57089fb4bc0e66ee4fb",
              "1": "7572e22a.f9bc7bef.45df3e14.b1e0a0f9.77bcc4eb.67ab4541.860c51ff.4a9cf951.842d3790.348ddf12.1e05be5f.9692a5c1.77bcc4eb.57f89f2f.28f9eba2.4a9cf951"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 30,
                              "endLine": 30,
                              "startColumn": 17,
                              "endColumn": 27
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 30,
                              "endLine": 30,
                              "startColumn": 17,
                              "endColumn": 27
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 30,
                              "endLine": 30,
                              "startColumn": 2,
                              "endColumn": 13
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 33,
                              "endLine": 33,
                              "startColumn": 28,
                              "endColumn": 39
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 33,
                              "endLine": 33,
                              "startColumn": 14,
                              "endColumn": 27
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 33,
                              "endLine": 33,
                              "startColumn": 3,
                              "endColumn": 10
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 34,
                              "endLine": 34,
                              "startColumn": 28,
                              "endColumn": 35
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 47,
                              "endLine": 47,
                              "startColumn": 30,
                              "endColumn": 37
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 47,
                              "endLine": 47,
                              "startColumn": 16,
                              "endColumn": 29
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 47,
                              "endLine": 47,
                              "startColumn": 4,
                              "endColumn": 12
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 10,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 48,
                              "endLine": 48,
                              "startColumn": 29,
                              "endColumn": 37
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 11,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 57,
                              "endLine": 57,
                              "startColumn": 27,
                              "endColumn": 35
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 12,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 57,
                              "endLine": 57,
                              "startColumn": 27,
                              "endColumn": 44
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 13,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/generator/main.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 57,
                              "endLine": 57,
                              "startColumn": 14,
                              "endColumn": 26
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 450,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "go/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "arguments": [
                "[file name](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
                "[os.ReadFile](10)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/conformance/conformance_test.go",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 27,
                    "endLine": 27,
                    "startColumn": 15,
                    "endColumn": 27
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "7ccb64ad503a3c5e1cb6184aae00527189d2a2365a6892caa53b18a381a8f8a2",
              "1": "2d06e3d6.f9bc7bef.45df3e14.6483b32f.556f02b4.67ab4541.860c51ff.4a9cf951.8da4b8b6.c55d47e1.101dbbcf.3b3d627b.e8c00e77.67ab4541.1bf4e01c.4a9cf951"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 55,
                              "endLine": 55,
                              "startColumn": 44,
                              "endColumn": 56
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 55,
                              "endLine": 55,
                              "startColumn": 44,
                              "endColumn": 56
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 55,
                              "endLine": 55,
                              "startColumn": 21,
                              "endColumn": 34
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 55,
                              "endLine": 55,
                              "startColumn": 9,
                              "endColumn": 15
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 23,
                              "endLine": 23,
                              "startColumn": 10,
                              "endColumn": 15
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 25,
                              "endLine": 25,
                              "startColumn": 29,
                              "endColumn": 34
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 27,
                              "endLine": 27,
                              "startColumn": 31,
                              "endColumn": 36
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 27,
                              "endLine": 27,
                              "startColumn": 31,
                              "endColumn": 45
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 68,
                              "endLine": 68,
                              "startColumn": 33,
                              "endColumn": 37
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 69,
                              "endLine": 69,
                              "startColumn": 27,
                              "endColumn": 31
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 10,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 69,
                              "endLine": 69,
                              "startColumn": 15,
                              "endColumn": 26
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 450,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          },
          {
            "ruleId": "go/PT/test",
            "ruleIndex": 2,
            "level": "note",
            "message": {
              "text": "Unsanitized input from file name flows into os.ReadFile, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "markdown": "Unsanitized input from {0} {1} into {2}, where it is used as a path. This may result in a Path Traversal vulnerability and allow an attacker to read arbitrary files.",
              "arguments": [
                "[file name](0)",
                "[flows](1),(2),(3),(4),(5),(6),(7),(8),(9)",
                "[os.ReadFile](10)"
              ]
            },
            "locations": [
              {
                "physicalLocation": {
                  "artifactLocation": {
                    "uri": "test/conformance/conformance_test.go",
                    "uriBaseId": "%SRCROOT%"
                  },
                  "region": {
                    "startLine": 69,
                    "endLine": 69,
                    "startColumn": 15,
                    "endColumn": 26
                  }
                }
              }
            ],
            "fingerprints": {
              "0": "586e09d57351d9f1568d238c27a487573a14a570a3ce420fe3fc3a350ff4dce5",
              "1": "8379f5e8.e0beca80.45df3e14.89f13fa7.556f02b4.67ab4541.860c51ff.678b0e20.8da4b8b6.73eb5804.45df3e14.3b3d627b.e8c00e77.67ab4541.1bf4e01c.4a9cf951"
            },
            "codeFlows": [
              {
                "threadFlows": [
                  {
                    "locations": [
                      {
                        "location": {
                          "id": 0,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 55,
                              "endLine": 55,
                              "startColumn": 44,
                              "endColumn": 56
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 1,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 55,
                              "endLine": 55,
                              "startColumn": 44,
                              "endColumn": 56
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 2,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 55,
                              "endLine": 55,
                              "startColumn": 21,
                              "endColumn": 34
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 3,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 55,
                              "endLine": 55,
                              "startColumn": 9,
                              "endColumn": 15
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 4,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 23,
                              "endLine": 23,
                              "startColumn": 10,
                              "endColumn": 15
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 5,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 25,
                              "endLine": 25,
                              "startColumn": 29,
                              "endColumn": 34
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 6,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 27,
                              "endLine": 27,
                              "startColumn": 31,
                              "endColumn": 36
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 7,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 27,
                              "endLine": 27,
                              "startColumn": 31,
                              "endColumn": 45
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 8,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 68,
                              "endLine": 68,
                              "startColumn": 33,
                              "endColumn": 37
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 9,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 69,
                              "endLine": 69,
                              "startColumn": 27,
                              "endColumn": 31
                            }
                          }
                        }
                      },
                      {
                        "location": {
                          "id": 10,
                          "physicalLocation": {
                            "artifactLocation": {
                              "uri": "test/conformance/conformance_test.go",
                              "uriBaseId": "%SRCROOT%"
                            },
                            "region": {
                              "startLine": 69,
                              "endLine": 69,
                              "startColumn": 15,
                              "endColumn": 26
                            }
                          }
                        }
                      }
                    ]
                  }
                ]
              }
            ],
            "properties": {
              "priorityScore": 450,
              "priorityScoreFactors": [
                {
                  "label": true,
                  "type": "multipleOccurrence"
                },
                {
                  "label": true,
                  "type": "hotFileSource"
                },
                {
                  "label": true,
                  "type": "fixExamples"
                }
              ],
              "isAutofixable": false
            }
          }
        ],
        "properties": {
          "coverage": [
            {
              "isSupported": true,
              "lang": "Python",
              "files": 1,
              "type": "SUPPORTED"
            },
            {
              "isSupported": true,
              "lang": "Go",
              "files": 46,
              "type": "SUPPORTED"
            }
          ]
        }
      }
    ]
  }
